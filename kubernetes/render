#!/usr/bin/env python

import os
import sys
from argparse import ArgumentParser
from jinja2 import Environment, FileSystemLoader

PATH = os.path.dirname(os.path.abspath(__file__))
TEMPLATE_ENVIRONMENT = Environment(
    autoescape=False,
    loader=FileSystemLoader(PATH),
    trim_blocks=False)

def render_template(src, dest, dictionary):
    template = TEMPLATE_ENVIRONMENT.get_template(src)
    rendered_template = template.render(**dictionary)
    file = open(dest, 'w')
    file.write(rendered_template)
    file.close()

render_usage = '''render <command> [<args>]
The current supported render commands are the following:
    deployment  Generate a k8s deployment manifest file
'''
deployment_usage = '''render deployment [<args>]
Renders a manifest file that creates a deployment manifest from template
Required arguments
    -a, --app-name          The application name
    -n, --namespace         The namespace to create with this manifest
    -v, --version           The version of the container image to deploy
    -s, --stage             The stage of development
    -d, --dns-domain        The dns domain of the cluster
    -p, --aad-pod-id-name   The name of the Azure AD Pod Identity
    -c, --agw-ssl-cert-name The name of the SSL Certificate assigned to the Application Gateway
    -e, --env               The container environment variables as key:value pairs separated by spaces.
                              ENV_VAR1:VALUE ENV_VAR2:"value with spaces"
'''
class Render(object):
    def __init__(self):
        parser = ArgumentParser(description = 'Render tool for manifest files',
                                usage = render_usage)
        parser.add_argument('command', help = 'Command to run')
        self.base_parser = self.build_base_parser()

        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        getattr(self, args.command)()

    def build_base_parser(self):
        parser = ArgumentParser(add_help = False)

        return parser

    def deployment(self):
        parser = ArgumentParser('deployment', add_help = False, usage = deployment_usage,
                                description='Generates a deployment manifest')
        parser.add_argument('-a','--app-name', type=str, required=True)
        parser.add_argument('-n','--namespace', type=str, required=True)
        parser.add_argument('-v','--version', type=str, required=True)
        parser.add_argument('-s','--stage', type=str, required=True)
        parser.add_argument('-d','--dns-domain', type=str, required=True)
        parser.add_argument('-p','--aad-pod-id-name', metavar="AAD_POD_IDENTITY_NAME", type=str, required=True)
        parser.add_argument('-c','--agw-ssl-cert-name', metavar="AGW_SSL_CERTIFICATE_NAME", type=str, required=True)
        parser.add_argument('-e','--env', metavar="KEY:VALUE", nargs='+', required=False)
        args = parser.parse_args(sys.argv[2:])
        render_template('deployment-template.yaml', '{}/deployment.yaml'.format(PATH), vars(args))

if __name__ == '__main__':
    Render()
